Tuple 
==============================================
Immutable 


Set:
==============================================

>>> x= set("aabcadefggd")
>>> x
{'f', 'b', 'c', 'e', 'g', 'a', 'd'}

>>> type(x)
<class 'set'>
------------------------------

>>> y= set((1,2,6))
>>> x= set((1,2,3,4,5,6))
>>> y=set((1,2,6))
>>> x.difference(y)
{3, 4, 5}
>>> x
{1, 2, 3, 4, 5, 6}

It will not change the content of x 
----------------------------------

>>> x.difference_update(y)
>>> x
{3, 4, 5}

This will change set x 
-----------------------------------------
>>> x.isdisjoint(([9,7,8]))
True

pop will remove arbitory  >> no need to specify 
---------------------------------
>>> x.discard(9)
>>> x.remove(9)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 9

-----------------------------
>>> y
{1, 2, 6, 7}
>>> x.symmetric_difference(y)
{3, 4, 5, 7}
>>> x
{1, 2, 3, 4, 5, 6}

---------------------------
>>> x.union(y)
{1, 2, 3, 4, 5, 6, 7}

-----------------------------
>>> x | y
{1, 2, 3, 4, 5, 6, 7}
>>> x ^ y
{3, 4, 5, 7}
>>> x & y
{1, 2, 6}
-----------------------------

>>> x
{1, 2, 3, 4, 5, 6}
>>> y
{1, 2, 6, 7}
>>> x |y
{1, 2, 3, 4, 5, 6, 7}
>>> x|=y
>>> x
{1, 2, 3, 4, 5, 6, 7}
>>> x-=y
>>> x
{3, 4, 5}


+++++++++++++++++++++++++
Shallow copy and deep copy >> interview question

>>> z=[[1,2,3],4,5,6]
>>> z
[[1, 2, 3], 4, 5, 6]
>>> a= z.copy()
>>> a
[[1, 2, 3], 4, 5, 6]
>>> a[0].append(100)
>>> a
[[1, 2, 3, 100], 4, 5, 6]
>>> z
[[1, 2, 3, 100], 4, 5, 6]
>>> import copy
>>> c= copy.deepcopy(z)
>>> c[0].append(200)
>>> c
[[1, 2, 3, 100, 200], 4, 5, 6]
>>> z
[[1, 2, 3, 100], 4, 5, 6]
>>> a
[[1, 2, 3, 100], 4, 5, 6]

Read about frozen set and try to invoke methods

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Dictionary 
unordered 
slicing not posible as there is not index












